apiVersion: batch/v1
kind: Job
metadata:
  name: pg-bootstrap
spec:
  backoffLimit: 0
  ttlSecondsAfterFinished: 180
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: bootstrap
          image: postgres:14-alpine
          env:
            - name: PGHOST
              value: postgres
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: admin
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-users
                  key: admin.password
            - name: PGDATABASE
              value: data
          command: ["/bin/sh","-c"]
          args:
            - |
              set -euo pipefail

              echo "Waiting for Postgres at ${PGHOST}:${PGPORT}..."
              until pg_isready -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d postgres -t 3; do sleep 2; done

              echo "Checking database ${PGDATABASE}..."
              if ! psql -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='${PGDATABASE}'" | grep -q 1; then
                echo "Creating database ${PGDATABASE}..."
                psql -d postgres -v ON_ERROR_STOP=1 -c "CREATE DATABASE ${PGDATABASE};"

                echo "Applying dbschema.sql..."
                psql -d "${PGDATABASE}" -v ON_ERROR_STOP=1 -f /schema/dbschema.sql

                psql -d "${PGDATABASE}" -v ON_ERROR_STOP=1 -c "
                  CREATE SCHEMA IF NOT EXISTS bootstrap;
                  CREATE TABLE IF NOT EXISTS bootstrap.migrations(
                    id text primary key,
                    applied_at timestamptz default now()
                  );
                  INSERT INTO bootstrap.migrations(id) VALUES ('init-001') ON CONFLICT DO NOTHING;
                "
              else
                echo "Database ${PGDATABASE} already exists. Skipping."
              fi

              echo "Bootstrap done."
          volumeMounts:
            - name: schema
              mountPath: /schema/dbschema.sql
              subPath: dbschema.sql
      volumes:
        - name: schema
          configMap:
            name: pg-schema
